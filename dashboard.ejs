<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>SG Platform</title>
    <link rel="shortcut icon" type="image/png" href="/platform/assets/images/logos/favicon.png" />
    <!-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous"> -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js"
        integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa"
        crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap JS (for modals) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>

    <link rel="stylesheet" href="styles.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="https://fonts.gstatic.com" rel="preconnect" />
    <link rel="stylesheet" href="dataTables.css" />
    <link
        href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Nunito:300,300i,400,400i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i"
        rel="stylesheet">
        <link rel="stylesheet" href="https://cdn.ckeditor.com/ckeditor5/43.1.0/ckeditor5.css">

        <!-- <script src="https://cdn.ckeditor.com/ckeditor5/39.0.1/classic/ckeditor.js"></script> -->
        <script type="importmap">
            {
                "imports": {
                    "ckeditor5": "https://cdn.ckeditor.com/ckeditor5/43.1.0/ckeditor5.js",
                    "ckeditor5/": "https://cdn.ckeditor.com/ckeditor5/43.1.0/"
                }
            }
        </script>

    <style>
        @media screen and (max-width: 768px) {
            .scroll {
                display: block;
                overflow-x: auto;
            }

            .upper {
                margin-bottom: 5px;
            }
        }
    </style>
    <style>
           .ck-editor__editable_inline {
       padding: 20px;                /* Add padding inside the editor */
       min-height: 200px;            /* Optional: Set minimum height */
       box-sizing: border-box;       /* Ensure padding doesn't affect width */
   }
   
    /* Adjust padding or margin for unordered and ordered lists */
    .ck-content ul, .ck-content ol {
           padding-left: 30px; /* Increase this value as needed */
           margin-left: 0px;   /* Ensure margin doesn't push the bullets too far */
       }
   
       /* You can also adjust list item styling */
       .ck-content li {
           margin-left: 0px;
           padding-left: 5px;  /* Fine-tune spacing for the list items */
       }
     </style>
    

</head>

    <script>
        function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
    </script>

    <body>
        <nav class="navbar navbar-expand-lg bg-body-tertiary">
            <div class="container">
              <a class="navbar-brand" href="sg-mails-dashboard.html">
                <!-- <img src="android-chrome-512x512.png" alt="Logo" width="30" height="30" class="d-inline-block align-text-top"> -->
                Dashboard
              </a>
              <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
              </button>
              <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav ms-auto">
                  <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="sg-compose-outbox.html">Outbox</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="sg-compose.html">Compose</a>
                  </li>
                </ul>
              </div>
            </div>
        </nav>
        <!--  Body Wrapper -->
            <div class="page-wrapper" id="main-wrapper" data-layout="vertical" data-navbarbg="skin6"
                data-sidebartype="full" data-sidebar-position="fixed" data-header-position="fixed">
                    <!--  Main wrapper -->
                    <div class="body-wrapper">
                            <div class="container-fluid">
                                <div class="container-fluid">
                                    <div class="row justify-content-between">
                                        <div class="card">
                                            <div class="card-body">
                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <div class="flex-row mb-2">
                                                            <span class="fs-6 fw-semibold">All SG Mails</span>
                                                        </div>
                                                        <div class="flex-row mb-3">
                                                            <ul class="list-inline">
                                                                <span style="font-size: 10px;" class="fs-3 fw-semibold">
                                                                    Click on the View button to review and approve/reject an email.<br />
                                                                </span>
                                                            </ul>
                                                        </div>
                                                        <br>
                                                        <!-- Button to trigger modal -->

                                                        <!-- Modal -->
                                                        <div class="modal fade" id="approveRequestModal" tabindex="-1"
                                                            aria-labelledby="mailRequestModalLabel"
                                                            aria-hidden="true">
                                                            <div style="width:95%;margin:auto;padding-top:3%;padding-bottom:3%" class="modal-dialog modal-fullscreen my-auto">
                                                                <div class="modal-content">
                                                                    <div class="modal-header">
                                                                        <h5 class="modal-title" id="approveRequestModalLabel">
                                                                            Approve Mail From
                                                                        </h5>
                                                                        <button type="button" class="btn-close"
                                                                            data-bs-dismiss="modal"
                                                                            aria-label="Close"></button>
                                                                    </div>
                                                                    <div class="modal-body">
                                                                        <form id="myForm" enctype="multipart/form-data" method="POST" >
                                                                            <div class="alert alert-success" role="alert">
                                                                                <label for="notes" class="form-label">Additional Notes Sent by the Sender (if any)</label>
                                                                                <input style="background:transparent;border:none" disabled required name="notes" type="title" class="form-control" id="notes" placeholder="Use this space for any additional notes as requests to the approver">
                                                                            </div>
                                                                            <div class="mb-3">
                                                                                <label for="newTicketTitle" class="form-label">Sender Details</span></label>
                                                                                <input
                                                                                disabled
                                                                                required
                                                                                class="form-control"
                                                                                id="senderEmail"
                                                                                value=""
                                                                                >
                                                                                <input
                                                                                disabled
                                                                                required
                                                                                class="form-control"
                                                                                id="username"
                                                                                value=""
                                                                                >
                                                                            </div>
                                                                            <label for="select" class="form-label">Select Your Category of Mail<span style="color:rgb(177, 58, 58)">*</span></label>
                                                                            <select required name="alias" id="alias" class="form-select">
                                                                                <option disabled selected value="">Select</option>
                                                                                <option value="Inductions">Inductions</option>
                                                                                <option value="Lost and Found">Lost and Found</option>
                                                                                <option value="Jobs and Internships">Jobs and Internships</option>
                                                                                <option value="Surveys">Surveys</option>
                                                                                <option value="Campaigns">Campaigns</option>
                                                                                <option value="Fundraisers">Fundraisers</option>
                                                                                <option value="Events and Invitations">Events and Invitations</option>
                                                                                <option value="Promotions">Promotions</option>
                                                                            </select>
                                                                            <br />
                                                                            <label for="select" class="form-label">Select Recipients<span style="color:rgb(177, 58, 58)">*</span></label>
                                                                            <select required name="recipients" id="select-recipients" class="form-select" multiple size="6">
                                                                                <option disabled>Select</option>
                                                                                <option value="students@ashoka.edu.in">All Students</option>
                                                                                <option value="asp2025@ashoka.edu.in">ASP25</option>
                                                                                <option value="ug2022@ashoka.edu.in">UG26</option>
                                                                                <option value="ug2023@ashoka.edu.in">UG2023</option>
                                                                                <option value="ug2024@ashoka.edu.in">UG2024</option>
                                                                            </select>
                                                                            <p style="font-size:14px;color:rgb(192, 58, 58);">hold the ctrl/cmd key to select multiple options</p>
                                                                            <label for="subject" class="form-label">Subject (of mail)<span style="color:rgb(177, 58, 58)">*</span></label>
                                                                            <input required name="subject" type="title" class="form-control" id="subject">
                                                                            <br />
                                                                            <label for="editor" class="form-label">Mail Draft <span style="color:rgb(177, 58, 58)">*</span></label>
                                                                            <!-- Textarea that will be replaced by CKEditor -->
                                                                            <textarea style="margin-top:60px;padding:30px;" id="editor" name="mail_body"></textarea>
                                                                            <!-- <p style="font-size:14px;">PLEASE NOTE: The mail that you send out will have you in CC and your signature at the bottom.</p> -->
                                                                            <br />
                                                                            <label for="files" class="form-label">File Attachments (if any)</span></label>
                                                                            <input hidden type="text" id="attachment_path" name="attachment_path" value="">
                                                                            <input hidden type="text" id="mailid" name="mailid" value="">
                                                                            <br />
                                                                            <span id="links"></span>
                                                                            <br />
                                                                            <div class="alert alert-danger" role="alert">
                                                                                <label for="rejectReason" class="form-label">Reject Reason (if any)</span></label><br /><br />
                                                                                <input type="text" class="form-control" style="background:transparent;border:1px solid black" class="form-control" placeholder="Enter a reason if you are rejecting a particular email" id="rejectReason" name="rejectReason">
                                                                            </div>
                                                                        </form>
                                                                    </div>
                                                                    <div class="modal-footer">
                                                                        <button type="button" class="btn btn-secondary"
                                                                            data-bs-dismiss="modal">Close</button>
                                                                        
                                                                        <button type="button" id="sendEmailBtn" class="btn btn-success">
                                                                            <span id="sendEmailText">Send Email</span>
                                                                            <div class="d-flex justify-content-center">
                                                                                <div id="sendEmailSpinner" style="height:20px;width:20px;display:none" class="spinner-border" role="status">
                                                                                  <span class="sr-only">Loading...</span>
                                                                                </div>
                                                                        </button>
                                                                        <button type="button" id="rejectEmailBtn" class="btn btn-danger">
                                                                            <span id="rejectEmailText">Reject Request</span>
                                                                            <div class="d-flex justify-content-center">
                                                                                <div id="rejectEmailSpinner" style="height:20px;width:20px;display:none" class="spinner-border" role="status">
                                                                                  <span class="sr-only">Loading...</span>
                                                                                </div>
                                                                        </button>

                                                                      
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <form>
                                                            <div class="row">
                                                                <div class="col-lg-6">
                                                                    <select class="form-select" id="status" name="status">
                                                                        <option>Filter by Status</option>
                                                                        <option selected value="pending">pending</option>
                                                                        <option value="approved">approved</option>
                                                                        <option value="rejected">rejected</option>
                                                                    </select>
                                                                </div>
                                                                <div class="col-lg-6">
                                                                    <select class="form-select" id="aliasEl" name="alias">
                                                                        <option>Filter by Alias</option>
                                                                        <option value="Inductions">Inductions</option>
                                                                        <option value="Lost and Found">Lost and Found</option>
                                                                        <option value="Jobs and Internships">Jobs and Internships</option>
                                                                        <option value="Surveys">Surveys</option>
                                                                        <option value="Campaigns">Campaigns</option>
                                                                        <option value="Fundraisers">Fundraisers</option>
                                                                        <option value="Events and Invitations">Events and Invitations</option>
                                                                        <option value="Promotions">Promotions</option>
                                                                    </select>
                                                                </div>
                                                            </div>
                                                        </form>
                                                        <br />
                                                        <table id="sgmailcomposes" class="table table-striped scroll"
                                                            style="width:100%">
                                                            <thead>
                                                                <tr>
                                                                    <!-- <th></th> -->
                                                                    <th>R.ID</th>
                                                                    <th>Name</th>
                                                                    <th>Requested At</th>
                                                                    <th>Status</th>
                                                                    <th>Alias</th>
                                                                    <th>Recipients</th>
                                                                    <th>Actions</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody id="mail-rows">
                                                                <!-- Rows will be dynamically populated using JavaScript -->
                                                            </tbody>
                                                            <tfoot>
                                                                <tr>
                                                                    <!-- <th></th> -->
                                                                    <th>R.ID</th>
                                                                    <th>Name</th>
                                                                    <th>Requested At</th>
                                                                    <th>Status</th>
                                                                    <th>Alias</th>
                                                                    <th>Recipients</th>
                                                                    <th>Actions</th>
                                                                </tr>
                                                            </tfoot>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                    </div>
            </div>
            </div>
            </div>

            <script>
                $(document).ready(function () {
                    // Existing code for populating the modal...
                
                    // New code for handling email sending
                    $('#sendEmailBtn').on('click', function () {
                        // Gather all the necessary data from the form
                        document.getElementById('sendEmailBtn').disabled=true;
                        document.getElementById('rejectEmailBtn').disabled=true;
                        document.getElementById('sendEmailText').style.display="none";
                        document.getElementById('sendEmailSpinner').style.display="block";

                        const senderEmail = $('#senderEmail').val();
                        const alias = $('#alias').val();
                        const recipients = $('#select-recipients').val().join(',');
                        const subject = $('#subject').val();
                        const mailid = $('#mailid').val();
                        const mailBody = editorInstance.getData(); // Get content from CKEditor
                        const attachmentPath = $('#attachment_path').val(); // You'll need to populate this with the actual attachment path
                        const name = $('#username').val(); // You'll need to populate this with the actual attachment path
                        
                        // Create the data object to send
                        const emailData = {
                            name:name,
                            mailid:mailid,
                            senderEmail: senderEmail,
                            alias: alias,
                            recipients: recipients,
                            subject: subject,
                            mail_body: mailBody,
                            attachment_path: attachmentPath
                        };
                
                        // Send the POST request
                        $.ajax({
                            url: '/platform/sg-approved',
                            method: 'POST',
                            data: JSON.stringify(emailData),
                            contentType: 'application/json',
                            success: function(response) {
                                $('#approveRequestModal').modal('hide');
                                // Optionally, refresh the page or update the UI
                                alert('Email sent successfully!');

                                location.reload();
                            },
                            error: function(xhr, status, error) {
                                alert('Error sending email: ' + error);
                            }
                        });
                    });
                });
                    $('#rejectEmailBtn').on('click', function () {
                        // Gather all the necessary data from the form
                        document.getElementById('rejectEmailBtn').disabled=true;
                        document.getElementById('sendEmailBtn').disabled=true;
                        document.getElementById('rejectEmailText').style.display="none";
                        document.getElementById('rejectEmailSpinner').style.display="block";

                        const senderEmail = $('#senderEmail').val();
                        const alias = $('#alias').val();
                        const recipients = $('#select-recipients').val().join(',');
                        const subject = $('#subject').val();
                        const mailid = $('#mailid').val();
                        const mailBody = editorInstance.getData(); // Get content from CKEditor
                        const attachmentPath = $('#attachment_path').val(); // You'll need to populate this with the actual attachment path
                        const name = $('#username').val(); // You'll need to populate this with the actual attachment path
                        const rejectReason = $('#rejectReason').val();
                        
                        // Create the data object to send
                        const emailData = {
                            name:name,
                            mailid:mailid,
                            senderEmail: senderEmail,
                            alias: alias,
                            recipients: recipients,
                            subject: subject,
                            mail_body: mailBody,
                            attachment_path: attachmentPath,
                            rejectReason: rejectReason
                        };
                
                        // Send the POST request
                        $.ajax({
                            url: '/platform/sg-rejected',
                            method: 'POST',
                            data: JSON.stringify(emailData),
                            contentType: 'application/json',
                            success: function(response) {
                                $('#approveRequestModal').modal('hide');
                                // Optionally, refresh the page or update the UI
                                alert('Request rejected and user notified!');

                                location.reload();
                            },
                            error: function(xhr, status, error) {
                                alert('Error sending email: ' + error);
                            }
                        });
                    });
            </script>

            <script>
                $(document).ready(function () {
                    // When a View button is clicked
                    $('.view-button').on('click', function () {
                        // Get the data attributes from the button
                        const name = $(this).data('name');
                        const mailid = $(this).data('mailid');
                        const sender = $(this).data('sender');
                        const status = $(this).data('status');
                        const subject = $(this).data('subject');
                        const recipients = $(this).data('recipients');
                        const alias = $(this).data('alias');
                        const mail = $(this).data('mail');                        
                        const createdAt = new Date($(this).data('created-at')).toLocaleDateString();
                        const notes = $(this).data('notes');
                        let files = $(this).data('files');
                        
                        // Populate the modal fields
                        $('#approveRequestModalLabel').text(`Approve Mail From ${sender}`);
                        $('#senderEmail').val(sender);
                        $('#username').val(name);
                        $('#notes').val(notes);
                        $('#alias').val(alias);
                        $('#mailid').val(mailid);
                        $('#select-recipients').val(recipients.split(','));
                        $('#subject').val(subject);
                        $('#attachment_path').val(files);
                        $('#links').html('');
                        // $('#editor').val(`Mail body content for request created on ${createdAt}`);
                        if (editorInstance) {
                            editorInstance.setData(mail); // Populate CKEditor with HTML content
                        } else {
                            console.error("CKEditor instance not available");
                        }
                        files = files.split(',');
                        let filesHtml = '';
                        files.forEach(file => {
                            filesHtml += `<a href="${file}" target="_blank">${file}</a><br/>`;  // Create <a> tag
                        });
                        $('#links').html(filesHtml);
                    });
                });

            </script>
            
            <script>
                const phoneNumberInput = document.getElementById('phoneNumber');
                const phoneNumberError = document.getElementById('phone-number-error');
                let timeoutId;
                
                phoneNumberInput.addEventListener('keyup', function() {
                    clearTimeout(timeoutId); // Clear any existing timeout
                    timeoutId = setTimeout(validatePhoneNumber, 500); // Set a new timeout
                });
                
                function validatePhoneNumber() {
                    // Allow only 10-digit phone numbers
                    const regex = /^\d{10}$/;
                
                    if (!phoneNumberInput.value.match(regex)) {
                        phoneNumberError.textContent = 'Please enter a valid 10-digit phone number.';
                        phoneNumberInput.classList.add('is-invalid'); // Add Bootstrap class for visual feedback
                        return 0;
                    } else {
                        phoneNumberError.textContent = '';
                        phoneNumberInput.classList.remove('is-invalid'); // Remove Bootstrap class
                        return 1;
                    }
                }
                
                // Remove the validation message quickly after the user starts typing again
                phoneNumberInput.addEventListener('keydown', function() {
                    clearTimeout(timeoutId); // Clear the timeout to remove the message quickly
                    phoneNumberError.textContent = '';
                    phoneNumberInput.classList.remove('is-invalid'); // Remove Bootstrap class
                });
            </script>
            <script>
                 // Replace the <textarea> with a CKEditor instance and add plugins
                    let editorInstance;
                    function clearEditor() {
                        document.getElementById('myForm').reset();
                        if (editorInstance) {
                            editorInstance.setData('');  // Clear the editor content
                        } else {
                            console.error("Editor instance not available");
                        }

                        // Reset other form fields if necessary
                        document.getElementById('myForm').reset();
                    }
            </script>
            <script type="module">
                import {
                    ClassicEditor,
                    Essentials,
                    Paragraph,
                    Bold,
                    Italic,
                    Font,
                    Heading,
                    Alignment,
                    List,
                    Indent,
                    Link,
                    Table,
                    CodeBlock,
                    BlockQuote,
                    FindAndReplace,
                    FontBackgroundColor,
                    FontColor,
                    PageBreak,
                    SpecialCharacters,
                    Undo,
                } from 'ckeditor5';
            
                ClassicEditor
                    .create(document.querySelector('#editor'), {
                        plugins: [
                            Essentials, Paragraph, Bold, Italic, Font, Heading, Alignment, List, Indent, 
                            Link, Table, CodeBlock, BlockQuote, FindAndReplace, 
                             FontBackgroundColor, FontColor, PageBreak, 
                            SpecialCharacters, Undo
                        ],
                        toolbar: {
                            shouldNotGroupWhenFull: true,
                            items: [
                                // Document-wide tools
                                'undo', 'redo', '|', 'importWord', '|', 'findAndReplace', 'selectAll', '|',
                                'insertTemplate', 'tableOfContents', '|',
            
                                // Insertables
                                'link', 'insertTable', 'blockQuote', 
                                'horizontalLine', '|',
            
                                // Block-level formatting
                                'heading', 'style', '|',
            
                                // Basic styles, font and inline formatting
                                'bold', 'italic', 'underline', 'strikethrough', '|',
                                'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 
                                'highlight', 'superscript', 'subscript', 'code', '|',
                                'removeFormat', '|',
            
                                // Text alignment
                                'alignment', '|',
            
                                // Lists and indentation
                                'bulletedList', 'numberedList', 'multilevelList', 'todoList', '|'
                            ]
                        },
                        fontFamily: {
                            supportAllValues: true,
                        },
                        fontSize: {
                            options: [10, 12, 14, 'default', 18, 20, 22],
                            supportAllValues: true,
                        },
                        fontColor: {
                            columns: 12,
                            colors: [
                                { color: 'hsl(0, 0%, 0%)', label: 'Black' },
                                { color: 'hsl(0, 75%, 60%)', label: 'Red' },
                                // Add more colors as needed
                            ],
                        },
                        fontBackgroundColor: {
                            columns: 12,
                            colors: [
                                { color: 'hsl(0, 0%, 100%)', label: 'White' },
                                { color: 'hsl(0, 75%, 60%)', label: 'Red' },
                                // Add more background colors as needed
                            ],
                        },
                        list: {
                            properties: {
                                styles: true,
                                startIndex: true,
                                reversed: true,
                            },
                        },
                        link: {
                            decorators: {
                                toggleDownloadable: {
                                    mode: 'manual',
                                    label: 'Downloadable',
                                    attributes: {
                                        download: 'file',
                                    },
                                },
                            },
                            addTargetToExternalLinks: true,
                            defaultProtocol: 'https://',
                        },
                        heading: {
                            options: [
                                { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },
                                { model: 'heading1', view: 'h1', title: 'Heading 1', class: 'ck-heading_heading1' },
                                { model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' },
                                { model: 'heading3', view: 'h3', title: 'Heading 3', class: 'ck-heading_heading3' },
                                { model: 'heading4', view: 'h4', title: 'Heading 4', class: 'ck-heading_heading4' },
                                { model: 'heading5', view: 'h5', title: 'Heading 5', class: 'ck-heading_heading5' },
                                { model: 'heading6', view: 'h6', title: 'Heading 6', class: 'ck-heading_heading6' },
                            ],
                        },
                        alignment: {
                            options: ['left', 'center', 'right', 'justify']
                        },
                        table: {
                            contentToolbar: ['tableColumn', 'tableRow', 'mergeTableCells']
                        },
                        // Disable sticky toolbar
                        ui: {
                            viewportOffset: {
                                top: 70,  // Adjust this value as needed
                            }
                        },
                        language: 'en',
                    })
                    .then(editor => {
                        
                        // Add custom padding to the editable content area
                        editor.ui.view.editable.element.style.padding = '20px'; // Adjust padding as needed
                        // window.editor = editor; // Store the editor instance globally
                        editorInstance = editor; // Store the editor instance globally

                    })
                    .catch(error => {
                        console.error(error);
                    });
            </script>
            <script src="/platform/assets/libs/jquery/dist/jquery.min.js"></script>
            <script src="/platform/assets/libs/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
            <script src="/platform/assets/js/sidebarmenu.js"></script>
            <script src="/platform/assets/js/app.min.js"></script>
            <script src="/platform/assets/libs/apexcharts/dist/apexcharts.min.js"></script>
            <script src="/platform/assets/libs/simplebar/dist/simplebar.js"></script>
            <script src="/platform/assets/js/dashboard.js"></script>
            <script src="/platform/assets/js/theme.js"></script>
            <script src="/platform/assets/js/main.js"></script>
            <!-- <script src="https://code.jquery.com/jquery-3.7.0.js"></script> -->
            <script>
                // Mock data for demonstration
                const mailcomposes = [
                  {
                    id: 1,
                    attributes: {
                      sender: { data: { attributes: { username: "John Doe", email: "john.doe@example.com" } } },
                      createdAt: new Date(),
                      status: "pending",
                      alias: "Inductions",
                      recipients: "students@ashoka.edu.in",
                      mail_body: "This is the body of the email.",
                      subject: "Welcome to Inductions",
                      notes: "This is a note.",
                      attachment_path: "file1.pdf,file2.docx",
                    },
                  },
                  {
                    id: 2,
                    attributes: {
                      sender: { data: { attributes: { username: "Jane Smith", email: "jane.smith@example.com" } } },
                      createdAt: new Date(),
                      status: "approved",
                      alias: "Surveys",
                      recipients: "asp2025@ashoka.edu.in",
                      mail_body: "Please participate in our survey.",
                      subject: "Survey 2025",
                      notes: "",
                      attachment_path: "",
                    },
                  },
                ];
              
                // Generate rows dynamically
                const mailRows = mailcomposes.map((mail) => {
                  const statusClass =
                    mail.attributes.status === "pending"
                      ? "bg-warning text-white"
                      : mail.attributes.status === "approved"
                      ? "bg-info text-white"
                      : "bg-danger text-white";
              
                  const files = mail.attributes.attachment_path
                    ? mail.attributes.attachment_path.split(",").map((file) => `<a href="${file}" target="_blank">${file}</a>`).join(", ")
                    : "No Attachments";
              
                  const viewButton =
                    mail.attributes.status === "pending"
                      ? `<button data-bs-toggle="modal" data-bs-target="#approveRequestModal"
                                  type="button" class="btn btn-primary view-button"
                                  data-name="${mail.attributes.sender.data.attributes.username}"
                                  data-sender="${mail.attributes.sender.data.attributes.email}"
                                  data-status="${mail.attributes.status}"
                                  data-subject="${mail.attributes.subject}"
                                  data-recipients="${mail.attributes.recipients}"
                                  data-alias="${mail.attributes.alias}"
                                  data-mail="${mail.attributes.mail_body}"
                                  data-created-at="${mail.attributes.createdAt}"
                                  data-notes="${mail.attributes.notes}"
                                  data-mailid="${mail.id}"
                                  data-files="${mail.attributes.attachment_path}">
                                View
                              </button>`
                      : "None";
              
                  return `
                    <tr>
                      <td>${mail.id}</td>
                      <td>${mail.attributes.sender.data.attributes.username}</td>
                      <td>${new Date(mail.attributes.createdAt).toLocaleDateString("en", { month: "short" })} 
                          ${new Date(mail.attributes.createdAt).getDate()}, 
                          ${new Date(mail.attributes.createdAt).getFullYear()}</td>
                      <td><span class="${statusClass}">${mail.attributes.status}</span></td>
                      <td>${mail.attributes.alias}</td>
                      <td>${mail.attributes.recipients.substring(0, 25)}...</td>
                      <td>${viewButton}</td>
                    </tr>
                  `;
                }).join("");
              
                // Populate the table body
                document.getElementById("mail-rows").innerHTML = mailRows;
            </script>
            <script src="dataTables.js"></script>
            <!-- <script src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap4.min.js"></script> -->
            <script>
                const dayEl = document.getElementById('status');
                const routeEl = document.getElementById('aliasEl');

                // Custom range filtering function
                DataTable.ext.search.push(function (settings, data, dataIndex) {
                    let day = dayEl.value;
                    let route = routeEl.value;
                    let daydata = (data[3]) || 0;
                    let routedata = (data[4]) || 0;
                    if (
                        (day == "Filter by Status" && route == "Filter by Alias") ||
                        (daydata.includes(day) && route == "Filter by Alias") ||
                        (day == "Filter by Status" && routedata.includes(route)) ||
                        (daydata.includes(day) && routedata.includes(route))
                    ) {
                        // console.log(sem)
                        return true;
                    }

                    return false;
                });

                const table = new DataTable('#sgmailcomposes');

                // Changes to the inputs will trigger a redraw to update the table
                dayEl.addEventListener('change', function () {
                    table.draw();
                });
                routeEl.addEventListener('change', function () {
                    table.draw();
                });
            </script>
            <script>

            </script>
            <!-- <%-include("../partials/preloader-js")%> -->
    </body>

</html>